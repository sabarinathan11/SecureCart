{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a React-based e-commerce application for selling Symantec endpoint security licenses. Built as a full-stack application with Node.js/Express backend and React frontend, it provides a complete purchasing flow including email verification, payment processing, and license key delivery. The application is designed specifically for NK2IT, an Australian-based authorized Symantec reseller.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **State Management**: Zustand for cart management with persistence\n- **Data Fetching**: TanStack Query (React Query) for server state management\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom color scheme (NK2IT branding)\n- **Navigation**: Tab-based navigation system without routing library\n- **Form Handling**: React Hook Form with Zod validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM configured for PostgreSQL\n- **Session Management**: Express sessions with PostgreSQL storage\n- **API Design**: RESTful endpoints with JSON responses\n- **Error Handling**: Centralized error middleware with proper HTTP status codes\n\n## Data Storage\n- **Database**: PostgreSQL (via Neon Database serverless)\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Development Storage**: In-memory storage class for rapid development\n- **Session Storage**: PostgreSQL-backed session store using connect-pg-simple\n\n## Authentication & Security\n- **Email Verification**: OTP-based email verification system\n- **Session Management**: Server-side sessions with secure cookies\n- **Input Validation**: Zod schemas for both frontend and backend validation\n- **Payment Security**: Integration with BPOINT payment gateway for secure transactions\n\n## External Dependencies\n\n### Payment Processing\n- **BPOINT Payment Gateway**: Australian payment processor for credit card transactions\n- **Test Mode**: Simulated payments in development environment\n\n### Email Services\n- **Nodemailer**: SMTP email delivery for OTP codes and order confirmations\n- **Template System**: HTML email templates with NK2IT branding\n\n### Database & Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle ORM**: Type-safe database access with PostgreSQL dialect\n\n### Development Tools\n- **Vite**: Development server with HMR and build optimization\n- **ESBuild**: Production bundle compilation for server code\n- **Replit Integration**: Development environment plugins and error handling\n\n### UI & Styling\n- **Radix UI**: Accessible component primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n- **shadcn/ui**: Pre-built component system with consistent design patterns\n\n### Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **class-variance-authority**: Type-safe CSS class management\n- **clsx & tailwind-merge**: Conditional className utilities","size_bytes":3209},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        \"nk-orange\": \"var(--nk-orange)\",\n        \"nk-green\": \"var(--nk-green)\", \n        \"nk-navy\": \"var(--nk-navy)\",\n        \"nk-light\": \"var(--nk-light)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2963},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { emailService } from \"./services/emailService\";\nimport { paymentService } from \"./services/paymentService\";\nimport { licenseService } from \"./services/licenseService\";\nimport { pdfService } from \"./services/pdfService\";\nimport { emailVerificationSchema, otpVerificationSchema, checkoutSchema } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get all products\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  // Get single product\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Send OTP for email verification\n  app.post(\"/api/auth/send-otp\", async (req, res) => {\n    try {\n      const { email } = emailVerificationSchema.parse(req.body);\n      \n      // Generate 6-digit OTP\n      const otpCode = Math.floor(100000 + Math.random() * 900000).toString();\n      const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\n\n      // Store OTP\n      await storage.createOtpCode({\n        email,\n        code: otpCode,\n        expiresAt,\n      });\n\n      // Send OTP email\n      await emailService.sendOTP(email, otpCode);\n\n      res.json({ \n        message: \"OTP sent successfully\",\n        email,\n        // For demo mode, include the OTP in response\n        ...(process.env.NODE_ENV === 'development' && { demoOtp: otpCode })\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      console.error(\"Error sending OTP:\", error);\n      res.status(500).json({ message: \"Failed to send verification code\" });\n    }\n  });\n\n  // Verify OTP\n  app.post(\"/api/auth/verify-otp\", async (req, res) => {\n    try {\n      const { email, code } = otpVerificationSchema.parse(req.body);\n      \n      const otpRecord = await storage.getValidOtpCode(email, code);\n      if (!otpRecord) {\n        return res.status(400).json({ message: \"Invalid or expired verification code\" });\n      }\n\n      // Mark OTP as verified\n      await storage.markOtpAsVerified(otpRecord.id);\n\n      res.json({ \n        message: \"Email verified successfully\",\n        verified: true \n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      console.error(\"Error verifying OTP:\", error);\n      res.status(500).json({ message: \"Failed to verify code\" });\n    }\n  });\n\n  // Process checkout and payment\n  app.post(\"/api/orders/checkout\", async (req, res) => {\n    try {\n      const checkoutData = checkoutSchema.parse(req.body);\n      \n      // Verify email was previously verified (in production, you'd check session/token)\n      // For demo, we'll skip this check\n      \n      // Get products and calculate totals\n      const orderItems = [];\n      let subtotal = 0;\n      \n      for (const item of checkoutData.items) {\n        const product = await storage.getProduct(item.productId);\n        if (!product) {\n          return res.status(400).json({ message: `Product ${item.productId} not found` });\n        }\n        \n        const price = parseFloat(product.price);\n        const total = price * item.quantity;\n        subtotal += total;\n        \n        orderItems.push({\n          productId: product.id,\n          productName: product.name,\n          price: product.price,\n          quantity: item.quantity,\n          total: total.toFixed(2),\n        });\n      }\n      \n      const gst = subtotal * 0.1;\n      const totalAmount = subtotal + gst;\n      \n      // Generate order ID\n      const orderId = `NK2IT-${Date.now()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}`;\n      \n      // Create or get customer\n      let customer = await storage.getCustomerByEmail(checkoutData.email);\n      if (!customer) {\n        customer = await storage.createCustomer({\n          email: checkoutData.email,\n          firstName: checkoutData.billing.firstName,\n          lastName: checkoutData.billing.lastName,\n          company: checkoutData.billing.company,\n          phone: checkoutData.billing.phone,\n        });\n      }\n      \n      // Create order\n      const order = await storage.createOrder({\n        id: orderId,\n        customerId: customer.id,\n        email: checkoutData.email,\n        status: \"processing\",\n        subtotal: subtotal.toFixed(2),\n        gst: gst.toFixed(2),\n        total: totalAmount.toFixed(2),\n        paymentMethod: \"credit_card\",\n        paymentStatus: \"pending\",\n        billingAddress: checkoutData.billing,\n      });\n      \n      // Create order items\n      const createdItems = [];\n      for (const item of orderItems) {\n        const orderItem = await storage.createOrderItem({\n          orderId: order.id,\n          ...item,\n        });\n        createdItems.push(orderItem);\n      }\n      \n      // Process payment\n      const paymentResult = await paymentService.processPayment({\n        cardNumber: checkoutData.payment.cardNumber,\n        expiryDate: checkoutData.payment.expiryDate,\n        cvv: checkoutData.payment.cvv,\n        cardholderName: checkoutData.payment.cardholderName,\n        amount: totalAmount,\n        currency: 'AUD',\n        orderId: order.id,\n        customerEmail: checkoutData.email,\n        billingAddress: {\n          ...checkoutData.billing,\n          country: 'Australia',\n        },\n      });\n      \n      if (paymentResult.success) {\n        // Update order status\n        await storage.updateOrderStatus(order.id, \"completed\", paymentResult.transactionId);\n        \n        // Generate license keys\n        const licenseKeysData = [];\n        for (const item of createdItems) {\n          const keys = licenseService.generateLicenseKeys({\n            productId: item.productId,\n            productName: item.productName,\n            quantity: item.quantity,\n            orderId: order.id,\n            orderItemId: item.id,\n          });\n          \n          // Store license keys\n          for (const key of keys) {\n            await storage.createLicenseKey({\n              orderId: order.id,\n              orderItemId: item.id || null,\n              productId: item.productId,\n              licenseKey: key,\n            });\n          }\n          \n          licenseKeysData.push({\n            productName: item.productName,\n            keys,\n          });\n        }\n        \n        // Send license keys email\n        await emailService.sendLicenseKeys(checkoutData.email, order.id, licenseKeysData);\n        \n        res.json({\n          success: true,\n          orderId: order.id,\n          transactionId: paymentResult.transactionId,\n          licenseKeys: licenseKeysData,\n          total: totalAmount,\n        });\n      } else {\n        // Update order status to failed\n        await storage.updateOrderStatus(order.id, \"failed\");\n        \n        res.status(400).json({\n          success: false,\n          message: paymentResult.error || \"Payment processing failed\",\n          orderId: order.id,\n        });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      console.error(\"Error processing checkout:\", error);\n      res.status(500).json({ message: \"Failed to process order\" });\n    }\n  });\n\n  // Get order details\n  app.get(\"/api/orders/:orderId\", async (req, res) => {\n    try {\n      const order = await storage.getOrder(req.params.orderId);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      const items = await storage.getOrderItems(order.id);\n      const licenseKeys = await storage.getLicenseKeysByOrder(order.id);\n      const customer = await storage.getCustomer(order.customerId!);\n      \n      res.json({\n        order,\n        items,\n        licenseKeys,\n        customer,\n      });\n    } catch (error) {\n      console.error(\"Error fetching order:\", error);\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  // Generate and download invoice PDF\n  app.get(\"/api/orders/:orderId/invoice\", async (req, res) => {\n    try {\n      const order = await storage.getOrder(req.params.orderId);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      const items = await storage.getOrderItems(order.id);\n      const licenseKeys = await storage.getLicenseKeysByOrder(order.id);\n      const customer = await storage.getCustomer(order.customerId!);\n      \n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      \n      // Group license keys by product\n      const licenseKeysByProduct: { [key: string]: string[] } = {};\n      for (const license of licenseKeys) {\n        const item = items.find(i => i.id === license.orderItemId);\n        if (item) {\n          if (!licenseKeysByProduct[item.productName]) {\n            licenseKeysByProduct[item.productName] = [];\n          }\n          licenseKeysByProduct[item.productName].push(license.licenseKey);\n        }\n      }\n      \n      const licenseKeysForPdf = Object.entries(licenseKeysByProduct).map(([productName, keys]) => ({\n        productName,\n        keys,\n      }));\n      \n      const invoicePdf = pdfService.generateInvoicePdf({\n        order,\n        customer,\n        items,\n        licenseKeys: licenseKeysForPdf,\n      });\n      \n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"NK2IT-Invoice-${order.id}.pdf\"`);\n      res.send(invoicePdf);\n    } catch (error) {\n      console.error(\"Error generating invoice:\", error);\n      res.status(500).json({ message: \"Failed to generate invoice\" });\n    }\n  });\n\n  // Email invoice\n  app.post(\"/api/orders/:orderId/email-invoice\", async (req, res) => {\n    try {\n      const order = await storage.getOrder(req.params.orderId);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      const items = await storage.getOrderItems(order.id);\n      const licenseKeys = await storage.getLicenseKeysByOrder(order.id);\n      const customer = await storage.getCustomer(order.customerId!);\n      \n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      \n      // Group license keys by product\n      const licenseKeysByProduct: { [key: string]: string[] } = {};\n      for (const license of licenseKeys) {\n        const item = items.find(i => i.id === license.orderItemId);\n        if (item) {\n          if (!licenseKeysByProduct[item.productName]) {\n            licenseKeysByProduct[item.productName] = [];\n          }\n          licenseKeysByProduct[item.productName].push(license.licenseKey);\n        }\n      }\n      \n      const licenseKeysForPdf = Object.entries(licenseKeysByProduct).map(([productName, keys]) => ({\n        productName,\n        keys,\n      }));\n      \n      const invoicePdf = pdfService.generateInvoicePdf({\n        order,\n        customer,\n        items,\n        licenseKeys: licenseKeysForPdf,\n      });\n      \n      await emailService.sendInvoice(order.email, order.id, invoicePdf);\n      \n      res.json({ message: \"Invoice sent successfully\" });\n    } catch (error) {\n      console.error(\"Error sending invoice:\", error);\n      res.status(500).json({ message: \"Failed to send invoice\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12193},"server/storage.ts":{"content":"import { type Customer, type InsertCustomer, type Order, type InsertOrder, type OrderItem, type InsertOrderItem, type LicenseKey, type InsertLicenseKey, type Product, type OtpCode, type InsertOtpCode, type Address, type InsertAddress } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Products\n  getProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n\n  // Customers\n  getCustomer(id: string): Promise<Customer | undefined>;\n  getCustomerByEmail(email: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n\n  // Addresses\n  createAddress(address: InsertAddress): Promise<Address>;\n\n  // Orders\n  createOrder(order: InsertOrder): Promise<Order>;\n  getOrder(id: string): Promise<Order | undefined>;\n  updateOrderStatus(id: string, status: string, paymentReference?: string): Promise<void>;\n\n  // Order Items\n  createOrderItem(item: InsertOrderItem): Promise<OrderItem>;\n  getOrderItems(orderId: string): Promise<OrderItem[]>;\n\n  // License Keys\n  createLicenseKey(license: InsertLicenseKey): Promise<LicenseKey>;\n  getLicenseKeysByOrder(orderId: string): Promise<LicenseKey[]>;\n\n  // OTP Codes\n  createOtpCode(otp: InsertOtpCode): Promise<OtpCode>;\n  getValidOtpCode(email: string, code: string): Promise<OtpCode | undefined>;\n  markOtpAsVerified(id: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private products: Map<string, Product> = new Map();\n  private customers: Map<string, Customer> = new Map();\n  private addresses: Map<string, Address> = new Map();\n  private orders: Map<string, Order> = new Map();\n  private orderItems: Map<string, OrderItem> = new Map();\n  private licenseKeys: Map<string, LicenseKey> = new Map();\n  private otpCodes: Map<string, OtpCode> = new Map();\n\n  constructor() {\n    this.initializeProducts();\n  }\n\n  private initializeProducts() {\n    const products: Product[] = [\n      {\n        id: \"endpoint-protection\",\n        name: \"Symantec Endpoint Protection Enterprise\",\n        description: \"Comprehensive endpoint security with advanced threat protection for enterprise environments.\",\n        price: \"89.99\",\n        features: [\n          \"Advanced malware protection\",\n          \"Real-time threat detection\",\n          \"Centralized management console\",\n          \"Network and email protection\",\n          \"Device and application control\"\n        ],\n        isActive: true,\n        createdAt: new Date(),\n      },\n      {\n        id: \"endpoint-complete\",\n        name: \"Symantec Endpoint Security Complete\",\n        description: \"Complete security suite with EDR, threat hunting, and advanced analytics capabilities.\",\n        price: \"149.99\",\n        features: [\n          \"Everything in Enterprise +\",\n          \"Endpoint Detection & Response (EDR)\",\n          \"Advanced threat hunting\",\n          \"Behavioral forensics\",\n          \"AI-driven adaptive protection\",\n          \"Global Intelligence Network\"\n        ],\n        isActive: true,\n        createdAt: new Date(),\n      }\n    ];\n\n    products.forEach(product => {\n      this.products.set(product.id, product);\n    });\n  }\n\n  async getProducts(): Promise<Product[]> {\n    return Array.from(this.products.values()).filter(p => p.isActive);\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    return this.customers.get(id);\n  }\n\n  async getCustomerByEmail(email: string): Promise<Customer | undefined> {\n    return Array.from(this.customers.values()).find(customer => customer.email === email);\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    const id = randomUUID();\n    const customer: Customer = {\n      ...insertCustomer,\n      id,\n      company: insertCustomer.company || null,\n      phone: insertCustomer.phone || null,\n      createdAt: new Date(),\n    };\n    this.customers.set(id, customer);\n    return customer;\n  }\n\n  async createAddress(insertAddress: InsertAddress): Promise<Address> {\n    const id = randomUUID();\n    const address: Address = {\n      ...insertAddress,\n      id,\n      customerId: insertAddress.customerId || null,\n      country: insertAddress.country || \"Australia\",\n    };\n    this.addresses.set(id, address);\n    return address;\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const order: Order = {\n      ...insertOrder,\n      customerId: insertOrder.customerId || null,\n      paymentMethod: insertOrder.paymentMethod || null,\n      paymentStatus: insertOrder.paymentStatus || null,\n      paymentReference: insertOrder.paymentReference || null,\n      createdAt: new Date(),\n    };\n    this.orders.set(order.id, order);\n    return order;\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async updateOrderStatus(id: string, status: string, paymentReference?: string): Promise<void> {\n    const order = this.orders.get(id);\n    if (order) {\n      order.status = status;\n      order.paymentStatus = status;\n      if (paymentReference) {\n        order.paymentReference = paymentReference;\n      }\n      this.orders.set(id, order);\n    }\n  }\n\n  async createOrderItem(insertItem: InsertOrderItem): Promise<OrderItem> {\n    const id = randomUUID();\n    const item: OrderItem = {\n      ...insertItem,\n      id,\n      productId: insertItem.productId || null,\n      orderId: insertItem.orderId || null,\n    };\n    this.orderItems.set(id, item);\n    return item;\n  }\n\n  async getOrderItems(orderId: string): Promise<OrderItem[]> {\n    return Array.from(this.orderItems.values()).filter(item => item.orderId === orderId);\n  }\n\n  async createLicenseKey(insertLicense: InsertLicenseKey): Promise<LicenseKey> {\n    const id = randomUUID();\n    const license: LicenseKey = {\n      ...insertLicense,\n      id,\n      productId: insertLicense.productId || null,\n      orderId: insertLicense.orderId || null,\n      orderItemId: insertLicense.orderItemId || null,\n      status: insertLicense.status || \"active\",\n      createdAt: new Date(),\n    };\n    this.licenseKeys.set(id, license);\n    return license;\n  }\n\n  async getLicenseKeysByOrder(orderId: string): Promise<LicenseKey[]> {\n    return Array.from(this.licenseKeys.values()).filter(license => license.orderId === orderId);\n  }\n\n  async createOtpCode(insertOtp: InsertOtpCode): Promise<OtpCode> {\n    const id = randomUUID();\n    const otp: OtpCode = {\n      ...insertOtp,\n      id,\n      verified: false,\n      createdAt: new Date(),\n    };\n    this.otpCodes.set(id, otp);\n    return otp;\n  }\n\n  async getValidOtpCode(email: string, code: string): Promise<OtpCode | undefined> {\n    const now = new Date();\n    return Array.from(this.otpCodes.values()).find(\n      otp => otp.email === email && otp.code === code && otp.expiresAt > now && !otp.verified\n    );\n  }\n\n  async markOtpAsVerified(id: string): Promise<void> {\n    const otp = this.otpCodes.get(id);\n    if (otp) {\n      otp.verified = true;\n      this.otpCodes.set(id, otp);\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":7148},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  features: jsonb(\"features\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  company: text(\"company\"),\n  phone: text(\"phone\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const addresses = pgTable(\"addresses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: varchar(\"customer_id\").references(() => customers.id),\n  street: text(\"street\").notNull(),\n  city: text(\"city\").notNull(),\n  state: text(\"state\").notNull(),\n  postcode: text(\"postcode\").notNull(),\n  country: text(\"country\").default(\"Australia\"),\n  type: text(\"type\").notNull(), // 'billing' | 'shipping'\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey(),\n  customerId: varchar(\"customer_id\").references(() => customers.id),\n  email: text(\"email\").notNull(),\n  status: text(\"status\").notNull(), // 'pending' | 'processing' | 'completed' | 'failed'\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  gst: decimal(\"gst\", { precision: 10, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  paymentMethod: text(\"payment_method\"),\n  paymentStatus: text(\"payment_status\"),\n  paymentReference: text(\"payment_reference\"),\n  billingAddress: jsonb(\"billing_address\").notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id),\n  productId: varchar(\"product_id\").references(() => products.id),\n  productName: text(\"product_name\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const licenseKeys = pgTable(\"license_keys\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id),\n  orderItemId: varchar(\"order_item_id\").references(() => orderItems.id),\n  productId: varchar(\"product_id\").references(() => products.id),\n  licenseKey: text(\"license_key\").notNull().unique(),\n  status: text(\"status\").default(\"active\"), // 'active' | 'expired' | 'revoked'\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const otpCodes = pgTable(\"otp_codes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull(),\n  code: text(\"code\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  verified: boolean(\"verified\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\n// Insert Schemas\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAddressSchema = createInsertSchema(addresses).omit({\n  id: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  createdAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\n\nexport const insertLicenseKeySchema = createInsertSchema(licenseKeys).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOtpCodeSchema = createInsertSchema(otpCodes).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\n\nexport type Address = typeof addresses.$inferSelect;\nexport type InsertAddress = z.infer<typeof insertAddressSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\n\nexport type LicenseKey = typeof licenseKeys.$inferSelect;\nexport type InsertLicenseKey = z.infer<typeof insertLicenseKeySchema>;\n\nexport type OtpCode = typeof otpCodes.$inferSelect;\nexport type InsertOtpCode = z.infer<typeof insertOtpCodeSchema>;\n\nexport type Product = typeof products.$inferSelect;\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\n\n// Additional validation schemas\nexport const emailVerificationSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n});\n\nexport const otpVerificationSchema = z.object({\n  email: z.string().email(),\n  code: z.string().length(6, \"OTP must be 6 digits\"),\n});\n\nexport const checkoutSchema = z.object({\n  email: z.string().email(),\n  billing: z.object({\n    firstName: z.string().min(1, \"First name is required\"),\n    lastName: z.string().min(1, \"Last name is required\"),\n    company: z.string().optional(),\n    street: z.string().min(1, \"Street address is required\"),\n    city: z.string().min(1, \"City is required\"),\n    state: z.string().min(1, \"State is required\"),\n    postcode: z.string().min(4, \"Valid postcode required\"),\n    phone: z.string().optional(),\n  }),\n  payment: z.object({\n    cardNumber: z.string().min(1, \"Card number is required\"),\n    expiryDate: z.string().min(1, \"Expiry date is required\"),\n    cvv: z.string().min(3, \"CVV is required\"),\n    cardholderName: z.string().min(1, \"Cardholder name is required\"),\n  }),\n  items: z.array(z.object({\n    productId: z.string(),\n    quantity: z.number().min(1),\n  })),\n});\n\nexport type CheckoutData = z.infer<typeof checkoutSchema>;\n","size_bytes":6340},"client/src/App.tsx":{"content":"import { useState } from \"react\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Layout from \"@/components/Layout\";\nimport Home from \"@/pages/Home\";\nimport Products from \"@/pages/Products\";\nimport Support from \"@/pages/Support\";\nimport Cart from \"@/components/Cart\";\n\nfunction App() {\n  const [currentTab, setCurrentTab] = useState('home');\n\n  const renderTabContent = () => {\n    switch (currentTab) {\n      case 'home':\n        return <Home onTabChange={setCurrentTab} />;\n      case 'products':\n        return <Products />;\n      case 'support':\n        return <Support />;\n      case 'cart':\n        return <Cart onTabChange={setCurrentTab} />;\n      default:\n        return <Home onTabChange={setCurrentTab} />;\n    }\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Layout currentTab={currentTab} onTabChange={setCurrentTab}>\n          {renderTabContent()}\n        </Layout>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1209},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* NK2IT Brand Colors */\n  --nk-orange: hsl(41 96% 55%);\n  --nk-green: hsl(160 84% 39%);\n  --nk-navy: hsl(216 32% 17%);\n  --nk-light: hsl(210 40% 98%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-gray-50 text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold;\n  }\n}\n\n@layer utilities {\n  .text-nk-orange {\n    color: var(--nk-orange);\n  }\n  \n  .bg-nk-orange {\n    background-color: var(--nk-orange);\n  }\n  \n  .hover\\:bg-nk-orange:hover {\n    background-color: hsl(41 96% 50%);\n  }\n  \n  .text-nk-green {\n    color: var(--nk-green);\n  }\n  \n  .bg-nk-green {\n    background-color: var(--nk-green);\n  }\n  \n  .hover\\:bg-nk-green:hover {\n    background-color: hsl(160 84% 35%);\n  }\n  \n  .text-nk-navy {\n    color: var(--nk-navy);\n  }\n  \n  .bg-nk-navy {\n    background-color: var(--nk-navy);\n  }\n  \n  .bg-nk-light {\n    background-color: var(--nk-light);\n  }\n  \n  .border-nk-orange {\n    border-color: var(--nk-orange);\n  }\n}\n","size_bytes":6055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/emailService.ts":{"content":"import nodemailer from 'nodemailer';\n\ninterface EmailOptions {\n  to: string;\n  subject: string;\n  text?: string;\n  html?: string;\n  attachments?: Array<{\n    filename: string;\n    content: Buffer;\n    contentType: string;\n  }>;\n}\n\nclass EmailService {\n  private transporter: nodemailer.Transporter;\n\n  constructor() {\n    // In demo mode, use a test account or log emails\n    this.transporter = nodemailer.createTransport({\n      host: process.env.SMTP_HOST || 'smtp.ethereal.email',\n      port: parseInt(process.env.SMTP_PORT || '587'),\n      secure: false,\n      auth: {\n        user: process.env.SMTP_USER || 'demo@nk2it.com.au',\n        pass: process.env.SMTP_PASS || 'demo-password'\n      }\n    });\n  }\n\n  async sendOTP(email: string, otpCode: string): Promise<void> {\n    const mailOptions: EmailOptions = {\n      to: email,\n      subject: 'NK2IT - Email Verification Code',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <div style=\"background: linear-gradient(135deg, #F59E0B, #10B981); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0;\">\n            <h1 style=\"margin: 0; font-size: 28px;\">NK2IT</h1>\n            <p style=\"margin: 10px 0 0 0; opacity: 0.9;\">\"At Your Service...\"</p>\n          </div>\n          <div style=\"background: white; padding: 40px; border: 1px solid #e5e7eb; border-radius: 0 0 10px 10px;\">\n            <h2 style=\"color: #1E293B; margin-top: 0;\">Email Verification</h2>\n            <p style=\"color: #64748B; font-size: 16px; line-height: 1.5;\">\n              Thank you for shopping with NK2IT. To complete your purchase, please verify your email address using the code below:\n            </p>\n            <div style=\"background: #F8FAFC; border: 2px solid #F59E0B; border-radius: 8px; padding: 20px; text-align: center; margin: 30px 0;\">\n              <div style=\"font-size: 32px; font-weight: bold; color: #F59E0B; letter-spacing: 4px;\">${otpCode}</div>\n            </div>\n            <p style=\"color: #64748B; font-size: 14px;\">\n              This code will expire in 10 minutes. If you didn't request this verification, please ignore this email.\n            </p>\n            <hr style=\"border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;\">\n            <p style=\"color: #64748B; font-size: 12px; margin: 0;\">\n              NK2IT - Authorized Symantec Partner<br>\n              222, 20B Lexington Drive, Norwest Business Park, Baulkham Hills NSW 2153\n            </p>\n          </div>\n        </div>\n      `\n    };\n\n    try {\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`[EmailService] OTP for ${email}: ${otpCode}`);\n        console.log(`[EmailService] Demo mode - email would be sent`);\n      } else {\n        await this.transporter.sendMail(mailOptions);\n      }\n    } catch (error) {\n      console.error('Failed to send OTP email:', error);\n      throw new Error('Failed to send verification email');\n    }\n  }\n\n  async sendLicenseKeys(email: string, orderId: string, licenseKeys: Array<{ productName: string; keys: string[] }>): Promise<void> {\n    const licenseKeysHtml = licenseKeys.map(product => `\n      <div style=\"background: #F0F9FF; border: 1px solid #0EA5E9; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n        <h3 style=\"color: #0369A1; margin: 0 0 15px 0;\">${product.productName}</h3>\n        ${product.keys.map(key => `\n          <div style=\"background: white; border: 1px solid #BAE6FD; border-radius: 4px; padding: 10px; margin: 5px 0; font-family: monospace; font-size: 14px; color: #0369A1;\">\n            ${key}\n          </div>\n        `).join('')}\n      </div>\n    `).join('');\n\n    const mailOptions: EmailOptions = {\n      to: email,\n      subject: `NK2IT - Your Symantec License Keys (Order #${orderId})`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 700px; margin: 0 auto;\">\n          <div style=\"background: linear-gradient(135deg, #F59E0B, #10B981); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0;\">\n            <h1 style=\"margin: 0; font-size: 28px;\">NK2IT</h1>\n            <p style=\"margin: 10px 0 0 0; opacity: 0.9;\">\"At Your Service...\"</p>\n          </div>\n          <div style=\"background: white; padding: 40px; border: 1px solid #e5e7eb; border-radius: 0 0 10px 10px;\">\n            <h2 style=\"color: #1E293B; margin-top: 0;\">🎉 Your License Keys Are Ready!</h2>\n            <p style=\"color: #64748B; font-size: 16px; line-height: 1.5;\">\n              Thank you for your purchase! Your Symantec security licenses have been generated and are ready for deployment.\n            </p>\n            <div style=\"background: #FEF3C7; border: 1px solid #F59E0B; border-radius: 8px; padding: 15px; margin: 20px 0;\">\n              <strong>Order ID:</strong> ${orderId}\n            </div>\n            \n            <h3 style=\"color: #1E293B;\">Your License Keys:</h3>\n            ${licenseKeysHtml}\n            \n            <div style=\"background: #EFF6FF; border: 1px solid #3B82F6; border-radius: 8px; padding: 20px; margin: 30px 0;\">\n              <h4 style=\"color: #1E40AF; margin: 0 0 10px 0;\">📋 Next Steps:</h4>\n              <ul style=\"color: #1E40AF; margin: 0; padding-left: 20px;\">\n                <li>Save these license keys in a secure location</li>\n                <li>Download the Symantec software from the official portal</li>\n                <li>Use these keys during installation and activation</li>\n                <li>Contact our support team if you need installation assistance</li>\n              </ul>\n            </div>\n            \n            <hr style=\"border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;\">\n            <div style=\"text-align: center;\">\n              <h4 style=\"color: #1E293B;\">Need Help?</h4>\n              <p style=\"color: #64748B; margin: 5px 0;\">📧 support@nk2it.com.au</p>\n              <p style=\"color: #64748B; margin: 5px 0;\">📞 +61 2 XXXX XXXX</p>\n              <p style=\"color: #64748B; margin: 5px 0;\">🕒 Mon-Fri: 9:00 AM - 5:00 PM AEST</p>\n            </div>\n            <hr style=\"border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;\">\n            <p style=\"color: #64748B; font-size: 12px; margin: 0; text-align: center;\">\n              NK2IT - Authorized Symantec Partner<br>\n              222, 20B Lexington Drive, Norwest Business Park, Baulkham Hills NSW 2153\n            </p>\n          </div>\n        </div>\n      `\n    };\n\n    try {\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`[EmailService] License keys for ${email} (Order: ${orderId})`);\n        console.log(`[EmailService] Demo mode - license email would be sent`);\n      } else {\n        await this.transporter.sendMail(mailOptions);\n      }\n    } catch (error) {\n      console.error('Failed to send license keys email:', error);\n      throw new Error('Failed to send license keys email');\n    }\n  }\n\n  async sendInvoice(email: string, orderId: string, invoicePdf: Buffer): Promise<void> {\n    const mailOptions: EmailOptions = {\n      to: email,\n      subject: `NK2IT - Invoice for Order #${orderId}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <div style=\"background: linear-gradient(135deg, #F59E0B, #10B981); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0;\">\n            <h1 style=\"margin: 0; font-size: 28px;\">NK2IT</h1>\n            <p style=\"margin: 10px 0 0 0; opacity: 0.9;\">\"At Your Service...\"</p>\n          </div>\n          <div style=\"background: white; padding: 40px; border: 1px solid #e5e7eb; border-radius: 0 0 10px 10px;\">\n            <h2 style=\"color: #1E293B; margin-top: 0;\">Invoice Attached</h2>\n            <p style=\"color: #64748B; font-size: 16px; line-height: 1.5;\">\n              Please find attached the invoice for your recent Symantec license purchase (Order #${orderId}).\n            </p>\n            <p style=\"color: #64748B; font-size: 14px;\">\n              If you have any questions about your invoice, please don't hesitate to contact our support team.\n            </p>\n            <hr style=\"border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;\">\n            <p style=\"color: #64748B; font-size: 12px; margin: 0;\">\n              NK2IT - Authorized Symantec Partner<br>\n              222, 20B Lexington Drive, Norwest Business Park, Baulkham Hills NSW 2153\n            </p>\n          </div>\n        </div>\n      `,\n      attachments: [\n        {\n          filename: `NK2IT-Invoice-${orderId}.pdf`,\n          content: invoicePdf,\n          contentType: 'application/pdf'\n        }\n      ]\n    };\n\n    try {\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`[EmailService] Invoice for ${email} (Order: ${orderId})`);\n        console.log(`[EmailService] Demo mode - invoice email would be sent`);\n      } else {\n        await this.transporter.sendMail(mailOptions);\n      }\n    } catch (error) {\n      console.error('Failed to send invoice email:', error);\n      throw new Error('Failed to send invoice email');\n    }\n  }\n}\n\nexport const emailService = new EmailService();\n","size_bytes":9167},"server/services/licenseService.ts":{"content":"import { randomUUID } from 'crypto';\n\ninterface LicenseKeyData {\n  productId: string;\n  productName: string;\n  quantity: number;\n  orderId: string;\n  orderItemId?: string;\n}\n\nclass LicenseService {\n  generateLicenseKeys(data: LicenseKeyData): string[] {\n    const keys: string[] = [];\n    \n    for (let i = 0; i < data.quantity; i++) {\n      const key = this.generateSingleLicenseKey(data.productId);\n      keys.push(key);\n    }\n    \n    return keys;\n  }\n\n  private generateSingleLicenseKey(productId: string): string {\n    // Generate license key based on product type\n    const productPrefix = this.getProductPrefix(productId);\n    const segments = [\n      productPrefix,\n      this.generateSegment(5),\n      this.generateSegment(5),\n      this.generateSegment(5),\n      this.generateSegment(4)\n    ];\n    \n    return segments.join('-');\n  }\n\n  private getProductPrefix(productId: string): string {\n    const prefixes: Record<string, string> = {\n      'endpoint-protection': 'SEPEP',\n      'endpoint-complete': 'SESCO',\n    };\n    \n    return prefixes[productId] || 'SYMNT';\n  }\n\n  private generateSegment(length: number): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    \n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    \n    return result;\n  }\n\n  validateLicenseKey(licenseKey: string): boolean {\n    // Basic validation - check format\n    const keyPattern = /^[A-Z0-9]+-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{4}$/;\n    return keyPattern.test(licenseKey);\n  }\n\n  getProductFromLicenseKey(licenseKey: string): string | null {\n    if (!this.validateLicenseKey(licenseKey)) {\n      return null;\n    }\n\n    const prefix = licenseKey.split('-')[0];\n    const productMap: Record<string, string> = {\n      'SEPEP': 'endpoint-protection',\n      'SESCO': 'endpoint-complete',\n    };\n\n    return productMap[prefix] || null;\n  }\n\n  async activateLicense(licenseKey: string, customerInfo: any): Promise<boolean> {\n    // In a real implementation, this would communicate with Symantec's servers\n    // For demo purposes, we'll simulate activation\n    if (!this.validateLicenseKey(licenseKey)) {\n      return false;\n    }\n\n    console.log(`[LicenseService] License activated: ${licenseKey}`);\n    console.log(`[LicenseService] Customer: ${customerInfo.email}`);\n    \n    return true;\n  }\n\n  async revokeLicense(licenseKey: string, reason: string = 'User requested'): Promise<boolean> {\n    // In a real implementation, this would communicate with Symantec's servers\n    console.log(`[LicenseService] License revoked: ${licenseKey} - Reason: ${reason}`);\n    return true;\n  }\n\n  formatLicenseKeysForEmail(keys: string[], productName: string): { productName: string; keys: string[] } {\n    return {\n      productName,\n      keys\n    };\n  }\n\n  generateBatchLicenseKeys(orders: Array<{ productId: string; productName: string; quantity: number; orderId: string; orderItemId?: string }>): Array<{ orderId: string; orderItemId?: string; productId: string; keys: string[] }> {\n    return orders.map(order => ({\n      orderId: order.orderId,\n      orderItemId: order.orderItemId,\n      productId: order.productId,\n      keys: this.generateLicenseKeys(order)\n    }));\n  }\n}\n\nexport const licenseService = new LicenseService();\nexport type { LicenseKeyData };\n","size_bytes":3360},"server/services/paymentService.ts":{"content":"interface PaymentDetails {\n  cardNumber: string;\n  expiryDate: string;\n  cvv: string;\n  cardholderName: string;\n  amount: number;\n  currency: string;\n  orderId: string;\n  customerEmail: string;\n  billingAddress: {\n    firstName: string;\n    lastName: string;\n    street: string;\n    city: string;\n    state: string;\n    postcode: string;\n    country: string;\n  };\n}\n\ninterface PaymentResult {\n  success: boolean;\n  transactionId?: string;\n  reference?: string;\n  error?: string;\n  rawResponse?: any;\n}\n\nclass PaymentService {\n  private bpointApiUrl: string;\n  private bpointMerchantId: string;\n  private bpointApiKey: string;\n  private isTestMode: boolean;\n\n  constructor() {\n    this.bpointApiUrl = process.env.BPOINT_API_URL || 'https://www.bpoint.com.au/webapi/v3';\n    this.bpointMerchantId = process.env.BPOINT_MERCHANT_ID || 'demo_merchant';\n    this.bpointApiKey = process.env.BPOINT_API_KEY || 'demo_api_key';\n    this.isTestMode = process.env.NODE_ENV !== 'production';\n  }\n\n  async processPayment(paymentDetails: PaymentDetails): Promise<PaymentResult> {\n    try {\n      // In demo/test mode, simulate successful payment\n      if (this.isTestMode) {\n        return this.simulatePayment(paymentDetails);\n      }\n\n      // Real BPOINT integration\n      const payload = {\n        amount: Math.round(paymentDetails.amount * 100), // Convert to cents\n        currency: paymentDetails.currency,\n        reference: paymentDetails.orderId,\n        customer: {\n          contactDetails: {\n            emailAddress: paymentDetails.customerEmail,\n            firstName: paymentDetails.billingAddress.firstName,\n            lastName: paymentDetails.billingAddress.lastName,\n          },\n          address: {\n            addressLine1: paymentDetails.billingAddress.street,\n            city: paymentDetails.billingAddress.city,\n            state: paymentDetails.billingAddress.state,\n            postCode: paymentDetails.billingAddress.postcode,\n            countryCode: 'AU',\n          }\n        },\n        card: {\n          cardNumber: paymentDetails.cardNumber.replace(/\\s/g, ''),\n          expiryDateMonth: paymentDetails.expiryDate.split('/')[0],\n          expiryDateYear: `20${paymentDetails.expiryDate.split('/')[1]}`,\n          cvn: paymentDetails.cvv,\n          cardHolderName: paymentDetails.cardholderName,\n        },\n        type: 'payment'\n      };\n\n      const response = await fetch(`${this.bpointApiUrl}/transactions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Basic ${Buffer.from(`${this.bpointMerchantId}:${this.bpointApiKey}`).toString('base64')}`,\n        },\n        body: JSON.stringify(payload),\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.responseCode === 'SUCCESS') {\n        return {\n          success: true,\n          transactionId: result.transactionNumber,\n          reference: result.merchantReference,\n          rawResponse: result,\n        };\n      } else {\n        return {\n          success: false,\n          error: result.responseText || 'Payment processing failed',\n          rawResponse: result,\n        };\n      }\n    } catch (error) {\n      console.error('Payment processing error:', error);\n      return {\n        success: false,\n        error: 'Payment service unavailable. Please try again later.',\n      };\n    }\n  }\n\n  private async simulatePayment(paymentDetails: PaymentDetails): Promise<PaymentResult> {\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    // Demo mode: Accept test card numbers\n    const testCards = ['4111111111111111', '4111 1111 1111 1111'];\n    const cleanCardNumber = paymentDetails.cardNumber.replace(/\\s/g, '');\n\n    if (testCards.includes(cleanCardNumber) || testCards.includes(paymentDetails.cardNumber)) {\n      const transactionId = `DEMO_${Date.now()}_${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n      \n      console.log(`[PaymentService] Demo payment processed successfully`);\n      console.log(`[PaymentService] Transaction ID: ${transactionId}`);\n      console.log(`[PaymentService] Amount: $${paymentDetails.amount.toFixed(2)} ${paymentDetails.currency}`);\n\n      return {\n        success: true,\n        transactionId,\n        reference: paymentDetails.orderId,\n        rawResponse: {\n          responseCode: 'SUCCESS',\n          transactionNumber: transactionId,\n          merchantReference: paymentDetails.orderId,\n          amount: Math.round(paymentDetails.amount * 100),\n          currency: paymentDetails.currency,\n          testMode: true,\n        },\n      };\n    } else {\n      return {\n        success: false,\n        error: 'Invalid card number. Use 4111 1111 1111 1111 for testing.',\n      };\n    }\n  }\n\n  async refundPayment(transactionId: string, amount: number, reason?: string): Promise<PaymentResult> {\n    try {\n      if (this.isTestMode) {\n        console.log(`[PaymentService] Demo refund: ${transactionId} - $${amount.toFixed(2)}`);\n        return {\n          success: true,\n          transactionId: `REFUND_${Date.now()}`,\n          reference: transactionId,\n        };\n      }\n\n      const payload = {\n        originalTxnNumber: transactionId,\n        amount: Math.round(amount * 100),\n        type: 'refund',\n        ...(reason && { merchantReference: reason }),\n      };\n\n      const response = await fetch(`${this.bpointApiUrl}/transactions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Basic ${Buffer.from(`${this.bpointMerchantId}:${this.bpointApiKey}`).toString('base64')}`,\n        },\n        body: JSON.stringify(payload),\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.responseCode === 'SUCCESS') {\n        return {\n          success: true,\n          transactionId: result.transactionNumber,\n          reference: result.merchantReference,\n          rawResponse: result,\n        };\n      } else {\n        return {\n          success: false,\n          error: result.responseText || 'Refund processing failed',\n          rawResponse: result,\n        };\n      }\n    } catch (error) {\n      console.error('Refund processing error:', error);\n      return {\n        success: false,\n        error: 'Refund service unavailable. Please try again later.',\n      };\n    }\n  }\n}\n\nexport const paymentService = new PaymentService();\nexport type { PaymentDetails, PaymentResult };\n","size_bytes":6469},"server/services/pdfService.ts":{"content":"import { type Order, type OrderItem, type Customer } from \"@shared/schema\";\n\ninterface InvoiceData {\n  order: Order;\n  customer: Customer;\n  items: OrderItem[];\n  licenseKeys?: Array<{\n    productName: string;\n    keys: string[];\n  }>;\n}\n\nclass PdfService {\n  generateInvoicePdf(data: InvoiceData): Buffer {\n    // In a real implementation, you would use a PDF library like puppeteer, jsPDF, or PDFKit\n    // For demo purposes, we'll create a simple HTML-to-PDF conversion simulation\n    \n    const invoiceHtml = this.generateInvoiceHtml(data);\n    \n    // Simulate PDF generation - in reality you'd use puppeteer or similar:\n    // const browser = await puppeteer.launch();\n    // const page = await browser.newPage();\n    // await page.setContent(invoiceHtml);\n    // const pdfBuffer = await page.pdf({ format: 'A4' });\n    // await browser.close();\n    \n    // For demo, return HTML as buffer (in real app, this would be actual PDF)\n    return Buffer.from(invoiceHtml, 'utf8');\n  }\n\n  private generateInvoiceHtml(data: InvoiceData): string {\n    const { order, customer, items, licenseKeys } = data;\n    \n    const itemsHtml = items.map(item => `\n      <tr>\n        <td style=\"padding: 12px; border-bottom: 1px solid #e5e7eb;\">${item.productName}</td>\n        <td style=\"padding: 12px; border-bottom: 1px solid #e5e7eb; text-align: center;\">${item.quantity}</td>\n        <td style=\"padding: 12px; border-bottom: 1px solid #e5e7eb; text-align: right;\">$${parseFloat(item.price).toFixed(2)}</td>\n        <td style=\"padding: 12px; border-bottom: 1px solid #e5e7eb; text-align: right;\">$${parseFloat(item.total).toFixed(2)}</td>\n      </tr>\n    `).join('');\n\n    const licenseKeysHtml = licenseKeys ? licenseKeys.map(product => `\n      <div style=\"margin: 20px 0; padding: 15px; background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 8px;\">\n        <h4 style=\"margin: 0 0 10px 0; color: #1e293b;\">${product.productName}</h4>\n        <div style=\"font-family: monospace; font-size: 12px; line-height: 1.5;\">\n          ${product.keys.map(key => `<div style=\"margin: 2px 0;\">${key}</div>`).join('')}\n        </div>\n      </div>\n    `).join('') : '';\n\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <title>Invoice ${order.id}</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 20px; }\n          .header { background: linear-gradient(135deg, #F59E0B, #10B981); color: white; padding: 30px; margin: -20px -20px 30px -20px; }\n          .company-logo { font-size: 32px; font-weight: bold; margin: 0; }\n          .tagline { margin: 5px 0 0 0; opacity: 0.9; }\n          .invoice-details { display: flex; justify-content: space-between; margin-bottom: 30px; }\n          .invoice-info, .customer-info { flex: 1; }\n          .invoice-info { margin-right: 40px; }\n          .table { width: 100%; border-collapse: collapse; margin: 30px 0; }\n          .table th { background: #f8fafc; padding: 12px; text-align: left; border-bottom: 2px solid #e5e7eb; }\n          .totals { text-align: right; margin: 30px 0; }\n          .totals div { margin: 5px 0; }\n          .total-final { font-size: 18px; font-weight: bold; color: #1e293b; }\n          .footer { margin-top: 50px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #64748b; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1 class=\"company-logo\">NK2IT</h1>\n          <p class=\"tagline\">\"At Your Service...\"</p>\n        </div>\n\n        <div style=\"display: flex; justify-content: space-between; margin-bottom: 30px;\">\n          <div class=\"invoice-info\">\n            <h2 style=\"margin: 0 0 15px 0; color: #1e293b;\">INVOICE</h2>\n            <p><strong>Invoice #:</strong> ${order.id}</p>\n            <p><strong>Order Date:</strong> ${new Date(order.createdAt!).toLocaleDateString('en-AU')}</p>\n            <p><strong>Payment Status:</strong> ${order.paymentStatus}</p>\n            ${order.paymentReference ? `<p><strong>Transaction:</strong> ${order.paymentReference}</p>` : ''}\n          </div>\n          <div class=\"customer-info\">\n            <h3 style=\"margin: 0 0 15px 0; color: #1e293b;\">Bill To:</h3>\n            <p><strong>${customer.firstName} ${customer.lastName}</strong></p>\n            ${customer.company ? `<p>${customer.company}</p>` : ''}\n            <p>${order.email}</p>\n            ${typeof order.billingAddress === 'object' ? `\n              <p>\n                ${order.billingAddress.street}<br>\n                ${order.billingAddress.city}, ${order.billingAddress.state} ${order.billingAddress.postcode}\n              </p>\n            ` : ''}\n          </div>\n        </div>\n\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>Product</th>\n              <th style=\"text-align: center;\">Quantity</th>\n              <th style=\"text-align: right;\">Unit Price</th>\n              <th style=\"text-align: right;\">Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${itemsHtml}\n          </tbody>\n        </table>\n\n        <div class=\"totals\">\n          <div>Subtotal: $${parseFloat(order.subtotal).toFixed(2)}</div>\n          <div>GST (10%): $${parseFloat(order.gst).toFixed(2)}</div>\n          <div class=\"total-final\">Total: $${parseFloat(order.total).toFixed(2)}</div>\n        </div>\n\n        ${licenseKeys && licenseKeys.length > 0 ? `\n          <div style=\"margin: 40px 0;\">\n            <h3 style=\"color: #1e293b; margin-bottom: 20px;\">License Keys:</h3>\n            ${licenseKeysHtml}\n          </div>\n        ` : ''}\n\n        <div class=\"footer\">\n          <div style=\"text-align: center;\">\n            <h4 style=\"margin: 20px 0 10px 0; color: #1e293b;\">NK2IT - Authorized Symantec Partner</h4>\n            <p style=\"margin: 5px 0;\">222, 20B Lexington Drive, Norwest Business Park</p>\n            <p style=\"margin: 5px 0;\">Baulkham Hills NSW 2153, Australia</p>\n            <p style=\"margin: 5px 0;\">Email: support@nk2it.com.au | Phone: +61 2 XXXX XXXX</p>\n            <p style=\"margin: 20px 0 0 0; font-style: italic;\">Thank you for choosing NK2IT for your security needs!</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  async convertHtmlToPdf(html: string): Promise<Buffer> {\n    // In production, implement actual PDF conversion using puppeteer:\n    /*\n    const puppeteer = require('puppeteer');\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    await page.setContent(html);\n    const pdfBuffer = await page.pdf({ \n      format: 'A4',\n      printBackground: true,\n      margin: {\n        top: '20px',\n        right: '20px',\n        bottom: '20px',\n        left: '20px'\n      }\n    });\n    await browser.close();\n    return pdfBuffer;\n    */\n    \n    // For demo, return HTML as buffer\n    return Buffer.from(html, 'utf8');\n  }\n}\n\nexport const pdfService = new PdfService();\nexport type { InvoiceData };\n","size_bytes":6991},"client/src/components/Cart.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Plus, Minus, Trash2, ShoppingBag } from 'lucide-react';\nimport { useCartStore } from '@/store/cartStore';\nimport Checkout from './Checkout';\nimport { useState } from 'react';\n\ninterface CartProps {\n  onTabChange: (tab: string) => void;\n}\n\nexport default function Cart({ onTabChange }: CartProps) {\n  const [showCheckout, setShowCheckout] = useState(false);\n  const { items, updateQuantity, removeItem, getTotalItems, getSubtotal, getGST, getTotal } = useCartStore();\n\n  if (showCheckout) {\n    return (\n      <Checkout \n        onClose={() => setShowCheckout(false)}\n        onSuccess={() => {\n          setShowCheckout(false);\n          onTabChange('home');\n        }}\n      />\n    );\n  }\n\n  if (items.length === 0) {\n    return (\n      <div className=\"text-center py-16\" data-testid=\"empty-cart\">\n        <div className=\"text-6xl text-gray-300 mb-4\">\n          <ShoppingBag className=\"w-16 h-16 mx-auto\" />\n        </div>\n        <h2 className=\"text-2xl font-bold text-gray-400 mb-2\">Your cart is empty</h2>\n        <p className=\"text-gray-500 mb-6\">Add some security solutions to get started</p>\n        <Button \n          data-testid=\"button-browse-products\"\n          onClick={() => onTabChange('products')}\n          className=\"bg-nk-orange hover:bg-orange-600 text-white px-6 py-3 rounded-lg font-semibold\"\n        >\n          Browse Products\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div data-testid=\"cart-with-items\">\n      <h1 className=\"text-3xl font-bold mb-8\">Shopping Cart</h1>\n      \n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        {/* Cart Items */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Cart Items</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {items.map((item) => (\n                <div \n                  key={item.id}\n                  data-testid={`cart-item-${item.id}`}\n                  className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\"\n                >\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium\" data-testid={`text-item-name-${item.id}`}>\n                      {item.name}\n                    </h4>\n                    <p className=\"text-sm text-gray-600\" data-testid={`text-item-description-${item.id}`}>\n                      {item.description}\n                    </p>\n                    <div className=\"text-lg font-semibold text-nk-orange mt-1\">\n                      ${item.price.toFixed(2)} per seat\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        data-testid={`button-decrease-${item.id}`}\n                        onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                        className=\"w-8 h-8 rounded-full\"\n                      >\n                        <Minus className=\"w-4 h-4\" />\n                      </Button>\n                      \n                      <span \n                        className=\"w-12 text-center font-semibold\"\n                        data-testid={`text-quantity-${item.id}`}\n                      >\n                        {item.quantity}\n                      </span>\n                      \n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        data-testid={`button-increase-${item.id}`}\n                        onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                        className=\"w-8 h-8 rounded-full\"\n                      >\n                        <Plus className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                    \n                    <div \n                      className=\"text-lg font-semibold w-20 text-right\"\n                      data-testid={`text-item-total-${item.id}`}\n                    >\n                      ${(item.price * item.quantity).toFixed(2)}\n                    </div>\n                    \n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      data-testid={`button-remove-${item.id}`}\n                      onClick={() => removeItem(item.id)}\n                      className=\"text-red-500 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Order Summary */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"sticky top-24\">\n            <CardHeader>\n              <CardTitle>Order Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 mb-6\">\n                <div className=\"flex justify-between\">\n                  <span>Subtotal</span>\n                  <span data-testid=\"text-subtotal\">${getSubtotal().toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>GST (10%)</span>\n                  <span data-testid=\"text-gst\">${getGST().toFixed(2)}</span>\n                </div>\n                <div className=\"border-t border-gray-200 pt-3 flex justify-between font-semibold text-lg\">\n                  <span>Total</span>\n                  <span data-testid=\"text-total\">${getTotal().toFixed(2)}</span>\n                </div>\n              </div>\n\n              <Button \n                data-testid=\"button-checkout\"\n                onClick={() => setShowCheckout(true)}\n                className=\"w-full bg-nk-orange hover:bg-orange-600 text-white py-3 rounded-lg font-semibold\"\n              >\n                Proceed to Checkout\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6279},"client/src/components/Checkout.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { X, Check, CreditCard, Lock, AlertTriangle } from 'lucide-react';\nimport { useCartStore } from '@/store/cartStore';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport SuccessModal from './SuccessModal';\n\ninterface CheckoutProps {\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\n// Form schemas\nconst emailSchema = z.object({\n  email: z.string().email('Invalid email address'),\n});\n\nconst otpSchema = z.object({\n  otp: z.string().length(6, 'OTP must be 6 digits'),\n});\n\nconst addressSchema = z.object({\n  firstName: z.string().min(1, 'First name is required'),\n  lastName: z.string().min(1, 'Last name is required'),\n  company: z.string().optional(),\n  street: z.string().min(1, 'Street address is required'),\n  city: z.string().min(1, 'City is required'),\n  state: z.string().min(1, 'State is required'),\n  postcode: z.string().min(4, 'Valid postcode required'),\n  phone: z.string().optional(),\n});\n\nconst paymentSchema = z.object({\n  cardNumber: z.string().min(1, 'Card number is required'),\n  expiryDate: z.string().min(1, 'Expiry date is required'),\n  cvv: z.string().min(3, 'CVV is required'),\n  cardholderName: z.string().min(1, 'Cardholder name is required'),\n});\n\nexport default function Checkout({ onClose, onSuccess }: CheckoutProps) {\n  const [step, setStep] = useState(1);\n  const [checkoutData, setCheckoutData] = useState<any>({});\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [orderResult, setOrderResult] = useState<any>(null);\n  const { items, getSubtotal, getGST, getTotal, clearCart } = useCartStore();\n  const { toast } = useToast();\n\n  // Form instances\n  const emailForm = useForm({\n    resolver: zodResolver(emailSchema),\n    defaultValues: { email: '' },\n  });\n\n  const otpForm = useForm({\n    resolver: zodResolver(otpSchema),\n    defaultValues: { otp: '' },\n  });\n\n  const addressForm = useForm({\n    resolver: zodResolver(addressSchema),\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      company: '',\n      street: '',\n      city: '',\n      state: '',\n      postcode: '',\n      phone: '',\n    },\n  });\n\n  const paymentForm = useForm({\n    resolver: zodResolver(paymentSchema),\n    defaultValues: {\n      cardNumber: '',\n      expiryDate: '',\n      cvv: '',\n      cardholderName: '',\n    },\n  });\n\n  // Mutations\n  const sendOtpMutation = useMutation({\n    mutationFn: async (data: { email: string }) => {\n      const response = await apiRequest('POST', '/api/auth/send-otp', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCheckoutData(prev => ({ ...prev, email: emailForm.getValues().email }));\n      setStep(1.5); // Show OTP step\n      toast({\n        title: \"Verification Code Sent\",\n        description: `Check your email for the 6-digit code${data.demoOtp ? ` (Demo: ${data.demoOtp})` : ''}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send verification code\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyOtpMutation = useMutation({\n    mutationFn: async (data: { email: string; code: string }) => {\n      const response = await apiRequest('POST', '/api/auth/verify-otp', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      setStep(2);\n      toast({\n        title: \"Email Verified\",\n        description: \"Email verification successful!\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid verification code\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const checkoutMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/orders/checkout', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setOrderResult(data);\n      setShowSuccess(true);\n      clearCart();\n      toast({\n        title: \"Payment Successful!\",\n        description: \"Your license keys have been generated and sent to your email.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message || \"Payment processing failed\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEmailSubmit = (data: { email: string }) => {\n    sendOtpMutation.mutate(data);\n  };\n\n  const handleOtpSubmit = (data: { otp: string }) => {\n    verifyOtpMutation.mutate({\n      email: checkoutData.email,\n      code: data.otp,\n    });\n  };\n\n  const handleAddressSubmit = (data: any) => {\n    setCheckoutData(prev => ({ ...prev, billing: data }));\n    setStep(3);\n  };\n\n  const handlePaymentSubmit = (data: any) => {\n    const orderData = {\n      email: checkoutData.email,\n      billing: checkoutData.billing,\n      payment: data,\n      items: items.map(item => ({\n        productId: item.id,\n        quantity: item.quantity,\n      })),\n    };\n\n    checkoutMutation.mutate(orderData);\n  };\n\n  const getStepClass = (stepNumber: number) => {\n    if (stepNumber < step || (stepNumber === 1 && step === 1.5)) {\n      return 'w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-semibold mr-2';\n    } else if (stepNumber === step) {\n      return 'w-8 h-8 bg-nk-orange text-white rounded-full flex items-center justify-center text-sm font-semibold mr-2';\n    } else {\n      return 'w-8 h-8 bg-gray-200 text-gray-600 rounded-full flex items-center justify-center text-sm font-semibold mr-2';\n    }\n  };\n\n  const getStepTextClass = (stepNumber: number) => {\n    if (stepNumber < step || (stepNumber === 1 && step === 1.5)) {\n      return 'text-sm font-medium text-green-600';\n    } else if (stepNumber === step) {\n      return 'text-sm font-medium';\n    } else {\n      return 'text-sm text-gray-600';\n    }\n  };\n\n  if (showSuccess) {\n    return (\n      <SuccessModal\n        orderResult={orderResult}\n        onClose={() => {\n          setShowSuccess(false);\n          onSuccess();\n        }}\n      />\n    );\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50\" data-testid=\"checkout-modal\">\n      <div className=\"flex items-center justify-center min-h-screen p-4\">\n        <Card className=\"max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n          <CardHeader className=\"border-b border-gray-200\">\n            <div className=\"flex justify-between items-center\">\n              <CardTitle className=\"text-2xl font-bold\">Checkout</CardTitle>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onClose}\n                data-testid=\"button-close-checkout\"\n              >\n                <X className=\"h-5 w-5\" />\n              </Button>\n            </div>\n            \n            {/* Progress Steps */}\n            <div className=\"flex items-center space-x-4 mt-6\">\n              <div className=\"flex items-center\">\n                <div className={getStepClass(1)}>\n                  {step > 1 ? <Check className=\"w-4 h-4\" /> : '1'}\n                </div>\n                <span className={getStepTextClass(1)}>Email</span>\n              </div>\n              <div className=\"flex-1 h-px bg-gray-200\"></div>\n              <div className=\"flex items-center\">\n                <div className={getStepClass(2)}>\n                  {step > 2 ? <Check className=\"w-4 h-4\" /> : '2'}\n                </div>\n                <span className={getStepTextClass(2)}>Address</span>\n              </div>\n              <div className=\"flex-1 h-px bg-gray-200\"></div>\n              <div className=\"flex items-center\">\n                <div className={getStepClass(3)}>3</div>\n                <span className={getStepTextClass(3)}>Payment</span>\n              </div>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"p-6\">\n            {/* Step 1: Email Verification */}\n            {step === 1 && (\n              <div data-testid=\"checkout-step-email\">\n                <h3 className=\"text-xl font-semibold mb-4\">Email Verification</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  We'll send your license keys to this email address. Please verify it's correct.\n                </p>\n                \n                <Form {...emailForm}>\n                  <form onSubmit={emailForm.handleSubmit(handleEmailSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={emailForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              type=\"email\"\n                              placeholder=\"your@email.com\"\n                              data-testid=\"input-email\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-nk-orange hover:bg-orange-600 text-white\"\n                      disabled={sendOtpMutation.isPending}\n                      data-testid=\"button-send-otp\"\n                    >\n                      {sendOtpMutation.isPending ? 'Sending...' : 'Send Verification Code'}\n                    </Button>\n                  </form>\n                </Form>\n              </div>\n            )}\n\n            {/* Step 1.5: OTP Verification */}\n            {step === 1.5 && (\n              <div data-testid=\"checkout-step-otp\">\n                <h3 className=\"text-xl font-semibold mb-4\">Enter Verification Code</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  We've sent a 6-digit code to {checkoutData.email}\n                </p>\n                \n                <Form {...otpForm}>\n                  <form onSubmit={otpForm.handleSubmit(handleOtpSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={otpForm.control}\n                      name=\"otp\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Verification Code</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              placeholder=\"123456\"\n                              maxLength={6}\n                              className=\"text-center text-lg tracking-widest\"\n                              data-testid=\"input-otp\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-nk-green hover:bg-emerald-600 text-white\"\n                      disabled={verifyOtpMutation.isPending}\n                      data-testid=\"button-verify-otp\"\n                    >\n                      {verifyOtpMutation.isPending ? 'Verifying...' : 'Verify & Continue'}\n                    </Button>\n                    \n                    <Button\n                      type=\"button\"\n                      variant=\"link\"\n                      onClick={() => sendOtpMutation.mutate({ email: checkoutData.email })}\n                      className=\"w-full text-nk-orange\"\n                      data-testid=\"button-resend-otp\"\n                    >\n                      Resend Code\n                    </Button>\n                  </form>\n                </Form>\n              </div>\n            )}\n\n            {/* Step 2: Address Details */}\n            {step === 2 && (\n              <div data-testid=\"checkout-step-address\">\n                <h3 className=\"text-xl font-semibold mb-4\">Billing Address</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  Please provide your billing address for invoice generation.\n                </p>\n                \n                <Form {...addressForm}>\n                  <form onSubmit={addressForm.handleSubmit(handleAddressSubmit)} className=\"space-y-4\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={addressForm.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>First Name *</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-first-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={addressForm.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Last Name *</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-last-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={addressForm.control}\n                      name=\"company\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Company Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-company\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={addressForm.control}\n                      name=\"street\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Street Address *</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-street\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={addressForm.control}\n                        name=\"city\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>City *</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-city\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={addressForm.control}\n                        name=\"state\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>State *</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-state\">\n                                  <SelectValue placeholder=\"Select State\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"NSW\">New South Wales</SelectItem>\n                                <SelectItem value=\"VIC\">Victoria</SelectItem>\n                                <SelectItem value=\"QLD\">Queensland</SelectItem>\n                                <SelectItem value=\"WA\">Western Australia</SelectItem>\n                                <SelectItem value=\"SA\">South Australia</SelectItem>\n                                <SelectItem value=\"TAS\">Tasmania</SelectItem>\n                                <SelectItem value=\"ACT\">Australian Capital Territory</SelectItem>\n                                <SelectItem value=\"NT\">Northern Territory</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={addressForm.control}\n                        name=\"postcode\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Postcode *</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-postcode\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={addressForm.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone Number</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"tel\" data-testid=\"input-phone\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-nk-orange hover:bg-orange-600 text-white\"\n                      data-testid=\"button-continue-to-payment\"\n                    >\n                      Continue to Payment\n                    </Button>\n                  </form>\n                </Form>\n              </div>\n            )}\n\n            {/* Step 3: Payment */}\n            {step === 3 && (\n              <div data-testid=\"checkout-step-payment\">\n                <h3 className=\"text-xl font-semibold mb-4\">Payment</h3>\n                \n                {/* Order Summary */}\n                <Card className=\"mb-6\">\n                  <CardContent className=\"p-4\">\n                    <h4 className=\"font-medium mb-3\">Order Summary</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      {items.map((item) => (\n                        <div key={item.id} className=\"flex justify-between\">\n                          <span>{item.name} × {item.quantity}</span>\n                          <span>${(item.price * item.quantity).toFixed(2)}</span>\n                        </div>\n                      ))}\n                      <div className=\"flex justify-between\">\n                        <span>GST (10%)</span>\n                        <span>${getGST().toFixed(2)}</span>\n                      </div>\n                      <div className=\"border-t border-gray-200 pt-3 mt-3 flex justify-between font-semibold\">\n                        <span>Total (inc. GST)</span>\n                        <span data-testid=\"text-final-total\">${getTotal().toFixed(2)}</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Payment Form */}\n                <Card className=\"mb-6\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center mb-4\">\n                      <Lock className=\"w-5 h-5 text-green-600 mr-3\" />\n                      <div>\n                        <h4 className=\"font-semibold\">Secure Payment via BPOINT</h4>\n                        <p className=\"text-sm text-gray-600\">Your payment is processed securely</p>\n                      </div>\n                    </div>\n\n                    {/* Demo Mode Banner */}\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6\">\n                      <div className=\"flex items-center\">\n                        <AlertTriangle className=\"w-5 h-5 text-yellow-600 mr-2\" />\n                        <div>\n                          <div className=\"font-medium text-yellow-800\">Demo Mode Active</div>\n                          <div className=\"text-sm text-yellow-700\">\n                            Use test card: 4111 1111 1111 1111, CVV: 123, Any future date\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Form {...paymentForm}>\n                      <form onSubmit={paymentForm.handleSubmit(handlePaymentSubmit)} className=\"space-y-4\">\n                        <FormField\n                          control={paymentForm.control}\n                          name=\"cardNumber\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Card Number</FormLabel>\n                              <FormControl>\n                                <Input\n                                  {...field}\n                                  placeholder=\"1234 5678 9012 3456\"\n                                  data-testid=\"input-card-number\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={paymentForm.control}\n                            name=\"expiryDate\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Expiry Date</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    {...field}\n                                    placeholder=\"MM/YY\"\n                                    data-testid=\"input-expiry-date\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={paymentForm.control}\n                            name=\"cvv\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>CVV</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    {...field}\n                                    placeholder=\"123\"\n                                    data-testid=\"input-cvv\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={paymentForm.control}\n                          name=\"cardholderName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Cardholder Name</FormLabel>\n                              <FormControl>\n                                <Input\n                                  {...field}\n                                  data-testid=\"input-cardholder-name\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <Button\n                          type=\"submit\"\n                          className=\"w-full bg-nk-green hover:bg-emerald-600 text-white\"\n                          disabled={checkoutMutation.isPending}\n                          data-testid=\"button-complete-purchase\"\n                        >\n                          {checkoutMutation.isPending ? (\n                            'Processing Payment...'\n                          ) : (\n                            <>\n                              <CreditCard className=\"w-4 h-4 mr-2\" />\n                              Complete Purchase\n                            </>\n                          )}\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":26115},"client/src/components/Layout.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { ShoppingCart, Menu, X } from 'lucide-react';\nimport { useCartStore } from '@/store/cartStore';\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport logoPath from \"@assets/Nk2IT tag Logo_bg remove (1)_1755672419460.png\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n  currentTab?: string;\n  onTabChange?: (tab: string) => void;\n}\n\nconst NK2ITLogo = () => (\n  <div className=\"flex items-center space-x-3\">\n    <img \n      src={logoPath} \n      alt=\"NK2IT - At Your Service\" \n      className=\"h-10 w-auto\"\n      data-testid=\"nk2it-logo\"\n    />\n  </div>\n);\n\nconst TabButton = ({ \n  tab, \n  label, \n  isActive, \n  onClick,\n  showCart = false,\n  cartCount = 0 \n}: {\n  tab: string;\n  label: string;\n  isActive: boolean;\n  onClick: () => void;\n  showCart?: boolean;\n  cartCount?: number;\n}) => (\n  <button\n    data-testid={`tab-${tab}`}\n    onClick={onClick}\n    className={`relative py-4 px-1 font-medium transition-colors ${\n      isActive\n        ? 'text-nk-orange border-b-2 border-nk-orange'\n        : 'text-gray-500 hover:text-nk-orange hover:border-b-2 hover:border-nk-orange'\n    }`}\n  >\n    {label}\n    {showCart && cartCount > 0 && (\n      <span className=\"absolute -top-1 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n        {cartCount}\n      </span>\n    )}\n  </button>\n);\n\nexport default function Layout({ children, currentTab = 'home', onTabChange }: LayoutProps) {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const totalItems = useCartStore(state => state.getTotalItems());\n\n  const tabs = [\n    { id: 'home', label: 'Home' },\n    { id: 'products', label: 'Products' },\n    { id: 'support', label: 'Support' },\n    { id: 'cart', label: 'Cart', showCart: true },\n  ];\n\n  const handleTabClick = (tabId: string) => {\n    if (onTabChange) {\n      onTabChange(tabId);\n    }\n    setIsMobileMenuOpen(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-20\">\n            {/* Company Logo */}\n            <Link href=\"/\" data-testid=\"logo-link\">\n              <NK2ITLogo />\n            </Link>\n\n            {/* Desktop Navigation - Centered */}\n            <nav className=\"hidden md:flex space-x-12 flex-1 justify-center\">\n              {tabs.map(tab => (\n                <TabButton\n                  key={tab.id}\n                  tab={tab.id}\n                  label={tab.label}\n                  isActive={currentTab === tab.id}\n                  onClick={() => handleTabClick(tab.id)}\n                  showCart={tab.showCart}\n                  cartCount={totalItems}\n                />\n              ))}\n            </nav>\n\n            {/* Spacer for balance */}\n            <div className=\"hidden md:block w-32\"></div>\n\n            {/* Mobile Menu */}\n            <div className=\"md:hidden\">\n              <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" data-testid=\"mobile-menu-trigger\">\n                    <Menu className=\"h-6 w-6\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-[300px] sm:w-[400px]\">\n                  <nav className=\"flex flex-col space-y-4 mt-8\">\n                    {tabs.map(tab => (\n                      <button\n                        key={tab.id}\n                        data-testid={`mobile-tab-${tab.id}`}\n                        onClick={() => handleTabClick(tab.id)}\n                        className={`flex items-center justify-between p-4 rounded-lg text-left transition-colors ${\n                          currentTab === tab.id\n                            ? 'bg-nk-orange text-white'\n                            : 'text-gray-700 hover:bg-gray-100'\n                        }`}\n                      >\n                        <span className=\"font-medium\">{tab.label}</span>\n                        {tab.showCart && totalItems > 0 && (\n                          <span className=\"bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                            {totalItems}\n                          </span>\n                        )}\n                      </button>\n                    ))}\n                  </nav>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":4929},"client/src/components/ProductCard.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Plus, Minus, ShieldCheck, Lock, Check } from 'lucide-react';\nimport { useCartStore } from '@/store/cartStore';\nimport { useToast } from '@/hooks/use-toast';\nimport { type Product } from '@shared/schema';\n\ninterface ProductCardProps {\n  product: Product;\n}\n\nexport default function ProductCard({ product }: ProductCardProps) {\n  const [quantity, setQuantity] = useState(1);\n  const addItem = useCartStore(state => state.addItem);\n  const { toast } = useToast();\n\n  const handleQuantityChange = (change: number) => {\n    const newQuantity = Math.max(1, Math.min(999, quantity + change));\n    setQuantity(newQuantity);\n  };\n\n  const handleAddToCart = () => {\n    addItem(\n      {\n        id: product.id,\n        name: product.name,\n        price: parseFloat(product.price),\n        description: product.description,\n      },\n      quantity\n    );\n    \n    toast({\n      title: \"Added to Cart\",\n      description: `${product.name} (${quantity} seats) has been added to your cart.`,\n    });\n  };\n\n  const isComplete = product.id === 'endpoint-complete';\n  const features = Array.isArray(product.features) ? product.features : [];\n  \n  return (\n    <Card \n      data-testid={`card-product-${product.id}`}\n      className=\"overflow-hidden shadow-lg border border-gray-200\"\n    >\n      <div className={`p-6 text-white relative ${\n        isComplete \n          ? 'bg-gradient-to-r from-green-600 to-emerald-700' \n          : 'bg-gradient-to-r from-blue-600 to-blue-700'\n      }`}>\n        {isComplete && (\n          <Badge \n            className=\"absolute top-4 right-4 bg-yellow-400 text-yellow-900\"\n            data-testid=\"badge-popular\"\n          >\n            POPULAR\n          </Badge>\n        )}\n        \n        <div className=\"flex items-center space-x-3 mb-4\">\n          <div className=\"text-3xl\">\n            {isComplete ? <Lock className=\"w-8 h-8\" /> : <ShieldCheck className=\"w-8 h-8\" />}\n          </div>\n          <div>\n            <h3 className=\"text-xl font-bold\" data-testid={`text-product-name-${product.id}`}>\n              {product.name.replace('Symantec ', '')}\n            </h3>\n            <div className={`${isComplete ? 'text-green-200' : 'text-blue-200'}`}>\n              {isComplete ? 'Complete Edition' : 'Enterprise Edition'}\n            </div>\n          </div>\n        </div>\n        \n        <div>\n          <div className=\"text-3xl font-bold\" data-testid={`text-price-${product.id}`}>\n            ${parseFloat(product.price).toFixed(2)}\n          </div>\n          <div className={`${isComplete ? 'text-green-200' : 'text-blue-200'}`}>\n            per seat/year\n          </div>\n        </div>\n      </div>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"mb-6\">\n          <h4 className=\"font-semibold mb-3\">Key Features:</h4>\n          <ul className=\"space-y-2 text-sm text-gray-600\">\n            {features.map((feature, index) => (\n              <li \n                key={index} \n                className=\"flex items-center\"\n                data-testid={`feature-${product.id}-${index}`}\n              >\n                <Check className=\"w-4 h-4 text-green-500 mr-2 flex-shrink-0\" />\n                {feature}\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"mb-6\">\n          <Label htmlFor={`qty-${product.id}`} className=\"block text-sm font-medium mb-2\">\n            Quantity (Seats)\n          </Label>\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"icon\"\n              data-testid={`button-decrease-quantity-${product.id}`}\n              onClick={() => handleQuantityChange(-1)}\n              className=\"w-8 h-8 rounded-full\"\n            >\n              <Minus className=\"w-4 h-4\" />\n            </Button>\n            \n            <Input\n              id={`qty-${product.id}`}\n              type=\"number\"\n              value={quantity}\n              onChange={(e) => setQuantity(Math.max(1, Math.min(999, parseInt(e.target.value) || 1)))}\n              min=\"1\"\n              max=\"999\"\n              className=\"w-20 text-center\"\n              data-testid={`input-quantity-${product.id}`}\n            />\n            \n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"icon\"\n              data-testid={`button-increase-quantity-${product.id}`}\n              onClick={() => handleQuantityChange(1)}\n              className=\"w-8 h-8 rounded-full\"\n            >\n              <Plus className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <Button \n          onClick={handleAddToCart}\n          className={`w-full py-3 rounded-lg font-semibold text-white ${\n            isComplete \n              ? 'bg-nk-green hover:bg-emerald-600' \n              : 'bg-nk-orange hover:bg-orange-600'\n          }`}\n          data-testid={`button-add-to-cart-${product.id}`}\n        >\n          Add to Cart\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5309},"client/src/components/SuccessModal.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { CheckCircle, Download, Mail, Copy, X } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface SuccessModalProps {\n  orderResult: {\n    orderId: string;\n    transactionId: string;\n    licenseKeys: Array<{\n      productName: string;\n      keys: string[];\n    }>;\n    total: number;\n  };\n  onClose: () => void;\n}\n\nexport default function SuccessModal({ orderResult, onClose }: SuccessModalProps) {\n  const [isDownloading, setIsDownloading] = useState(false);\n  const { toast } = useToast();\n\n  const emailInvoiceMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', `/api/orders/${orderResult.orderId}/email-invoice`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Invoice Sent\",\n        description: \"Invoice has been sent to your email address.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send invoice. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDownloadInvoice = async () => {\n    try {\n      setIsDownloading(true);\n      const response = await fetch(`/api/orders/${orderResult.orderId}/invoice`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to download invoice');\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `NK2IT-Invoice-${orderResult.orderId}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Download Started\",\n        description: \"Invoice download has started.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download invoice. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsDownloading(false);\n    }\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied\",\n        description: \"License key copied to clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Failed to copy to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50\" data-testid=\"success-modal\">\n      <div className=\"flex items-center justify-center min-h-screen p-4\">\n        <Card className=\"max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"text-6xl text-green-500 mb-4\">\n              <CheckCircle className=\"w-16 h-16 mx-auto\" />\n            </div>\n            \n            <h2 className=\"text-3xl font-bold text-green-700 mb-2\">Payment Successful!</h2>\n            <p className=\"text-gray-600 mb-8\">\n              Your license keys have been generated and sent to your email.\n            </p>\n\n            {/* Order Details */}\n            <Card className=\"mb-6 text-left\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-4\">Order Details</h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Order ID:</span>\n                    <span className=\"font-mono\" data-testid=\"text-order-id\">\n                      {orderResult.orderId}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Transaction ID:</span>\n                    <span className=\"font-mono\" data-testid=\"text-transaction-id\">\n                      {orderResult.transactionId}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Payment Method:</span>\n                    <span>Credit Card</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Total Amount:</span>\n                    <span className=\"font-semibold\" data-testid=\"text-order-total\">\n                      ${orderResult.total.toFixed(2)} AUD\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* License Keys */}\n            <Card className=\"mb-6 text-left\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-4 text-blue-800\">Your License Keys</h3>\n                <div className=\"space-y-4\">\n                  {orderResult.licenseKeys.map((product, index) => (\n                    <div key={index} className=\"border border-blue-300 rounded-lg p-4\">\n                      <h4 className=\"font-medium text-blue-800 mb-3\" data-testid={`text-product-${index}`}>\n                        {product.productName}\n                      </h4>\n                      <div className=\"space-y-2\">\n                        {product.keys.map((key, keyIndex) => (\n                          <div\n                            key={keyIndex}\n                            className=\"flex justify-between items-center bg-gray-50 p-2 rounded border\"\n                            data-testid={`license-key-${index}-${keyIndex}`}\n                          >\n                            <span className=\"font-mono text-sm text-blue-700 flex-1 mr-2\">\n                              {key}\n                            </span>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => copyToClipboard(key)}\n                              data-testid={`button-copy-key-${index}-${keyIndex}`}\n                            >\n                              <Copy className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                <div className=\"mt-4 p-3 bg-blue-100 rounded-lg\">\n                  <p className=\"text-sm text-blue-700\">\n                    <CheckCircle className=\"w-4 h-4 inline mr-1\" />\n                    These license keys have also been sent to your email address.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Next Steps */}\n            <Card className=\"mb-6 text-left\">\n              <CardContent className=\"p-6\">\n                <h4 className=\"font-medium text-blue-800 mb-3\">📋 Next Steps:</h4>\n                <ul className=\"text-sm text-blue-700 space-y-1\">\n                  <li>• Save these license keys in a secure location</li>\n                  <li>• Download the Symantec software from the official portal</li>\n                  <li>• Use these keys during installation and activation</li>\n                  <li>• Contact our support team if you need installation assistance</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4 mb-4\">\n              <Button\n                onClick={handleDownloadInvoice}\n                disabled={isDownloading}\n                className=\"flex-1 bg-nk-orange hover:bg-orange-600 text-white\"\n                data-testid=\"button-download-invoice\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                {isDownloading ? 'Downloading...' : 'Download Invoice'}\n              </Button>\n              \n              <Button\n                onClick={() => emailInvoiceMutation.mutate()}\n                disabled={emailInvoiceMutation.isPending}\n                variant=\"outline\"\n                className=\"flex-1\"\n                data-testid=\"button-email-invoice\"\n              >\n                <Mail className=\"w-4 h-4 mr-2\" />\n                {emailInvoiceMutation.isPending ? 'Sending...' : 'Email Invoice'}\n              </Button>\n            </div>\n\n            <Button\n              onClick={onClose}\n              variant=\"link\"\n              className=\"w-full text-nk-orange hover:text-orange-600 font-medium\"\n              data-testid=\"button-continue-shopping\"\n            >\n              Continue Shopping\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8909},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Shield, Clock, Headphones, ShieldCheck, Lock } from 'lucide-react';\n\ninterface HomeProps {\n  onTabChange: (tab: string) => void;\n}\n\nexport default function Home({ onTabChange }: HomeProps) {\n  return (\n    <div>\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-nk-navy to-blue-800 rounded-2xl text-white p-8 md:p-12 mb-8\">\n        <div className=\"grid md:grid-cols-2 gap-8 items-center\">\n          <div>\n            <h1 className=\"text-3xl md:text-5xl font-bold mb-4\">\n              Enterprise Security Solutions\n            </h1>\n            <p className=\"text-xl mb-6 text-blue-100\">\n              Protect your business with industry-leading Symantec endpoint security licenses. \n              Professional support and instant delivery guaranteed.\n            </p>\n            <Button \n              data-testid=\"button-view-products\"\n              onClick={() => onTabChange('products')}\n              className=\"bg-nk-orange hover:bg-orange-600 text-white px-8 py-3 rounded-lg font-semibold\"\n            >\n              View Products\n            </Button>\n          </div>\n          <div className=\"hidden md:block\">\n            <div className=\"bg-white/10 rounded-xl p-6 backdrop-blur-sm\">\n              <div className=\"text-6xl text-center mb-4\">🛡️</div>\n              <div className=\"text-center\">\n                <div className=\"text-sm text-blue-200\">Trusted by 1000+ businesses</div>\n                <div className=\"text-2xl font-bold\">99.9% Uptime</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Company Info */}\n      <section className=\"grid md:grid-cols-3 gap-6 mb-12\">\n        <Card className=\"border border-gray-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-nk-orange text-3xl mb-4\">\n              <Shield className=\"w-8 h-8\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">Authorized Reseller</h3>\n            <p className=\"text-gray-600\">\n              Official Symantec partner providing genuine licenses with full vendor support.\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border border-gray-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-nk-green text-3xl mb-4\">\n              <Clock className=\"w-8 h-8\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">Instant Delivery</h3>\n            <p className=\"text-gray-600\">\n              License keys delivered immediately upon payment confirmation via email.\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border border-gray-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-blue-600 text-3xl mb-4\">\n              <Headphones className=\"w-8 h-8\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">Expert Support</h3>\n            <p className=\"text-gray-600\">\n              Australian-based technical support for deployment and configuration assistance.\n            </p>\n          </CardContent>\n        </Card>\n      </section>\n\n      {/* Featured Products Preview */}\n      <section className=\"bg-white rounded-xl p-8 shadow-sm border border-gray-200\">\n        <h2 className=\"text-2xl font-bold mb-6\">Featured Security Solutions</h2>\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <Card className=\"border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <ShieldCheck className=\"text-blue-600 w-8 h-8\" />\n                <div>\n                  <h3 className=\"text-xl font-semibold\">Symantec Endpoint Protection Enterprise</h3>\n                </div>\n              </div>\n              <p className=\"text-gray-600 mb-4\">\n                Comprehensive endpoint security with advanced threat protection for enterprise environments.\n              </p>\n              <div className=\"text-2xl font-bold text-nk-orange mb-4\">\n                $89.99 <span className=\"text-sm text-gray-500\">per seat/year</span>\n              </div>\n              <Button \n                data-testid=\"button-view-endpoint-protection\"\n                onClick={() => onTabChange('products')}\n                className=\"w-full bg-nk-orange hover:bg-orange-600 text-white rounded-lg font-medium\"\n              >\n                View Details\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <Lock className=\"text-green-600 w-8 h-8\" />\n                <div>\n                  <h3 className=\"text-xl font-semibold\">Symantec Endpoint Security Complete</h3>\n                </div>\n              </div>\n              <p className=\"text-gray-600 mb-4\">\n                Complete security suite with EDR, threat hunting, and advanced analytics capabilities.\n              </p>\n              <div className=\"text-2xl font-bold text-nk-orange mb-4\">\n                $149.99 <span className=\"text-sm text-gray-500\">per seat/year</span>\n              </div>\n              <Button \n                data-testid=\"button-view-endpoint-complete\"\n                onClick={() => onTabChange('products')}\n                className=\"w-full bg-nk-orange hover:bg-orange-600 text-white rounded-lg font-medium\"\n              >\n                View Details\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":5750},"client/src/pages/Products.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport ProductCard from '@/components/ProductCard';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Check, X } from 'lucide-react';\nimport { type Product } from '@shared/schema';\n\nexport default function Products() {\n  const { data: products, isLoading, error } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n  });\n\n  if (isLoading) {\n    return (\n      <div>\n        <h1 className=\"text-3xl font-bold mb-8\">Symantec Security Products</h1>\n        <div className=\"grid md:grid-cols-2 gap-8 mb-12\">\n          {[1, 2].map((i) => (\n            <Card key={i} className=\"overflow-hidden\">\n              <div className=\"h-32 bg-gray-200\">\n                <Skeleton className=\"w-full h-full\" />\n              </div>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                <Skeleton className=\"h-4 w-full mb-4\" />\n                <Skeleton className=\"h-8 w-20 mb-4\" />\n                <div className=\"space-y-2 mb-6\">\n                  {[1, 2, 3].map((j) => (\n                    <Skeleton key={j} className=\"h-4 w-full\" />\n                  ))}\n                </div>\n                <Skeleton className=\"h-10 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-16\">\n        <h1 className=\"text-3xl font-bold mb-4\">Products</h1>\n        <p className=\"text-red-600\">Failed to load products. Please try again later.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-8\">\n        <h1 className=\"text-3xl font-bold\">Symantec Security Products</h1>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"text-sm text-gray-500\">\n            Showing {products?.length || 0} products\n          </div>\n        </div>\n      </div>\n\n      {/* Product Grid */}\n      <div className=\"grid md:grid-cols-2 gap-8 mb-12\">\n        {products?.map((product) => (\n          <ProductCard key={product.id} product={product} />\n        ))}\n      </div>\n\n      {/* Product Comparison */}\n      <Card className=\"mt-12\">\n        <CardContent className=\"p-8\">\n          <h3 className=\"text-2xl font-bold mb-6\">Product Comparison</h3>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\" data-testid=\"comparison-table\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left py-3 px-4\">Feature</th>\n                  <th className=\"text-center py-3 px-4\">Endpoint Protection</th>\n                  <th className=\"text-center py-3 px-4\">Endpoint Security Complete</th>\n                </tr>\n              </thead>\n              <tbody className=\"text-gray-600\">\n                <tr className=\"border-b border-gray-100\">\n                  <td className=\"py-3 px-4 font-medium\">Malware Protection</td>\n                  <td className=\"text-center py-3 px-4\">\n                    <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                  </td>\n                  <td className=\"text-center py-3 px-4\">\n                    <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                  </td>\n                </tr>\n                <tr className=\"border-b border-gray-100\">\n                  <td className=\"py-3 px-4 font-medium\">Firewall & Network Protection</td>\n                  <td className=\"text-center py-3 px-4\">\n                    <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                  </td>\n                  <td className=\"text-center py-3 px-4\">\n                    <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                  </td>\n                </tr>\n                <tr className=\"border-b border-gray-100\">\n                  <td className=\"py-3 px-4 font-medium\">Endpoint Detection & Response</td>\n                  <td className=\"text-center py-3 px-4\">\n                    <X className=\"w-5 h-5 text-red-500 mx-auto\" />\n                  </td>\n                  <td className=\"text-center py-3 px-4\">\n                    <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                  </td>\n                </tr>\n                <tr className=\"border-b border-gray-100\">\n                  <td className=\"py-3 px-4 font-medium\">Advanced Threat Hunting</td>\n                  <td className=\"text-center py-3 px-4\">\n                    <X className=\"w-5 h-5 text-red-500 mx-auto\" />\n                  </td>\n                  <td className=\"text-center py-3 px-4\">\n                    <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                  </td>\n                </tr>\n                <tr className=\"border-b border-gray-100\">\n                  <td className=\"py-3 px-4 font-medium\">AI-Driven Analytics</td>\n                  <td className=\"text-center py-3 px-4\">Basic</td>\n                  <td className=\"text-center py-3 px-4\">Advanced</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5233},"client/src/pages/Support.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { MapPin, Phone, Mail, Clock, ChevronDown, ChevronUp, BookOpen, MessageCircle, Ticket } from 'lucide-react';\n\nexport default function Support() {\n  const [openFaq, setOpenFaq] = useState<number | null>(null);\n\n  const faqs = [\n    {\n      question: \"How long does license delivery take?\",\n      answer: \"License keys are delivered instantly upon successful payment confirmation. You'll receive them via email within 5 minutes of purchase completion.\"\n    },\n    {\n      question: \"What payment methods do you accept?\",\n      answer: \"We accept all major credit cards, PayPal, and bank transfers through our secure BPOINT payment gateway.\"\n    },\n    {\n      question: \"Can I upgrade from Enterprise to Complete edition?\",\n      answer: \"Yes, you can upgrade at any time. Contact our support team to arrange the upgrade and we'll handle the license transfer process.\"\n    },\n    {\n      question: \"Do you provide installation support?\",\n      answer: \"Yes, we offer installation and configuration support as part of our service. Our technicians can assist remotely or provide detailed documentation.\"\n    }\n  ];\n\n  const toggleFaq = (index: number) => {\n    setOpenFaq(openFaq === index ? null : index);\n  };\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-4\">Support & Resources</h1>\n        <p className=\"text-gray-600\">\n          Get help with your Symantec security solutions. Our Australian-based team is here to assist you.\n        </p>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-8 mb-8\">\n        {/* Contact Information */}\n        <Card>\n          <CardContent className=\"p-8\">\n            <h3 className=\"text-xl font-bold mb-6\">Contact Information</h3>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"text-nk-orange text-xl\">\n                  <MapPin className=\"w-5 h-5\" />\n                </div>\n                <div>\n                  <div className=\"font-medium\">Address</div>\n                  <div className=\"text-gray-600 text-sm\">\n                    222, 20B Lexington Drive<br />\n                    Norwest Business Park<br />\n                    Baulkham Hills NSW 2153\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <div className=\"text-nk-orange text-xl\">\n                  <Phone className=\"w-5 h-5\" />\n                </div>\n                <div>\n                  <div className=\"font-medium\">Phone</div>\n                  <div className=\"text-gray-600 text-sm\">+61 2 XXXX XXXX</div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <div className=\"text-nk-orange text-xl\">\n                  <Mail className=\"w-5 h-5\" />\n                </div>\n                <div>\n                  <div className=\"font-medium\">Email</div>\n                  <div className=\"text-gray-600 text-sm\">support@nk2it.com.au</div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <div className=\"text-nk-orange text-xl\">\n                  <Clock className=\"w-5 h-5\" />\n                </div>\n                <div>\n                  <div className=\"font-medium\">Business Hours</div>\n                  <div className=\"text-gray-600 text-sm\">Mon-Fri: 9:00 AM - 5:00 PM AEST</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Support Resources */}\n        <Card>\n          <CardContent className=\"p-8\">\n            <h3 className=\"text-xl font-bold mb-6\">Support Resources</h3>\n            \n            <div className=\"space-y-4\">\n              <div className=\"border border-gray-200 rounded-lg p-4\">\n                <div className=\"flex items-center mb-2\">\n                  <BookOpen className=\"w-5 h-5 text-nk-orange mr-2\" />\n                  <h4 className=\"font-medium\">Documentation</h4>\n                </div>\n                <p className=\"text-gray-600 text-sm mb-3\">\n                  Installation guides, user manuals, and best practices.\n                </p>\n                <Button \n                  variant=\"link\" \n                  className=\"text-nk-orange hover:text-orange-600 p-0 h-auto text-sm font-medium\"\n                  data-testid=\"link-documentation\"\n                >\n                  View Docs →\n                </Button>\n              </div>\n              \n              <div className=\"border border-gray-200 rounded-lg p-4\">\n                <div className=\"flex items-center mb-2\">\n                  <MessageCircle className=\"w-5 h-5 text-nk-orange mr-2\" />\n                  <h4 className=\"font-medium\">Live Chat</h4>\n                </div>\n                <p className=\"text-gray-600 text-sm mb-3\">\n                  Chat with our technical support team in real-time.\n                </p>\n                <Button \n                  variant=\"link\" \n                  className=\"text-nk-orange hover:text-orange-600 p-0 h-auto text-sm font-medium\"\n                  data-testid=\"button-start-chat\"\n                >\n                  Start Chat →\n                </Button>\n              </div>\n              \n              <div className=\"border border-gray-200 rounded-lg p-4\">\n                <div className=\"flex items-center mb-2\">\n                  <Ticket className=\"w-5 h-5 text-nk-orange mr-2\" />\n                  <h4 className=\"font-medium\">Support Ticket</h4>\n                </div>\n                <p className=\"text-gray-600 text-sm mb-3\">\n                  Submit a detailed support request for complex issues.\n                </p>\n                <Button \n                  variant=\"link\" \n                  className=\"text-nk-orange hover:text-orange-600 p-0 h-auto text-sm font-medium\"\n                  data-testid=\"link-create-ticket\"\n                >\n                  Create Ticket →\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* FAQ Section */}\n      <Card>\n        <CardContent className=\"p-8\">\n          <h3 className=\"text-xl font-bold mb-6\">Frequently Asked Questions</h3>\n          \n          <div className=\"space-y-4\">\n            {faqs.map((faq, index) => (\n              <div key={index} className=\"border-b border-gray-200 pb-4\">\n                <button\n                  onClick={() => toggleFaq(index)}\n                  className=\"w-full text-left font-medium py-2 flex justify-between items-center hover:text-nk-orange transition-colors\"\n                  data-testid={`faq-question-${index}`}\n                >\n                  {faq.question}\n                  {openFaq === index ? (\n                    <ChevronUp className=\"w-4 h-4 text-gray-400\" />\n                  ) : (\n                    <ChevronDown className=\"w-4 h-4 text-gray-400\" />\n                  )}\n                </button>\n                {openFaq === index && (\n                  <div \n                    className=\"pt-2 text-gray-600 text-sm\"\n                    data-testid={`faq-answer-${index}`}\n                  >\n                    {faq.answer}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7605},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/store/cartStore.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nexport interface CartItem {\n  id: string;\n  name: string;\n  price: number;\n  quantity: number;\n  description: string;\n}\n\ninterface CartStore {\n  items: CartItem[];\n  addItem: (product: { id: string; name: string; price: number; description: string }, quantity: number) => void;\n  removeItem: (productId: string) => void;\n  updateQuantity: (productId: string, quantity: number) => void;\n  clearCart: () => void;\n  getTotalItems: () => number;\n  getSubtotal: () => number;\n  getGST: () => number;\n  getTotal: () => number;\n}\n\nexport const useCartStore = create<CartStore>()(\n  persist(\n    (set, get) => ({\n      items: [],\n      \n      addItem: (product, quantity) => set((state) => {\n        const existingItem = state.items.find(item => item.id === product.id);\n        \n        if (existingItem) {\n          return {\n            items: state.items.map(item =>\n              item.id === product.id\n                ? { ...item, quantity: item.quantity + quantity }\n                : item\n            )\n          };\n        }\n        \n        return {\n          items: [...state.items, {\n            id: product.id,\n            name: product.name,\n            price: product.price,\n            quantity,\n            description: product.description\n          }]\n        };\n      }),\n      \n      removeItem: (productId) => set((state) => ({\n        items: state.items.filter(item => item.id !== productId)\n      })),\n      \n      updateQuantity: (productId, quantity) => set((state) => {\n        if (quantity <= 0) {\n          return {\n            items: state.items.filter(item => item.id !== productId)\n          };\n        }\n        \n        return {\n          items: state.items.map(item =>\n            item.id === productId\n              ? { ...item, quantity }\n              : item\n          )\n        };\n      }),\n      \n      clearCart: () => set({ items: [] }),\n      \n      getTotalItems: () => {\n        return get().items.reduce((total, item) => total + item.quantity, 0);\n      },\n      \n      getSubtotal: () => {\n        return get().items.reduce((total, item) => total + (item.price * item.quantity), 0);\n      },\n      \n      getGST: () => {\n        return get().getSubtotal() * 0.1;\n      },\n      \n      getTotal: () => {\n        return get().getSubtotal() + get().getGST();\n      },\n    }),\n    {\n      name: 'nk2it-cart',\n    }\n  )\n);\n","size_bytes":2436},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}